{
  "name": "bouncy",
  "description": "Bounce HTTP requests around for a load balancer or http host router completely transparently",
  "version": "1.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/bouncy.git"
  },
  "main": "index.js",
  "bin": {
    "bouncy": "bin/bouncy.js"
  },
  "keywords": [
    "http",
    "parse",
    "bounce",
    "load",
    "balancer",
    "host",
    "route",
    "router",
    "transparent"
  ],
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "parsley": "0.1.x",
    "morestreams": "0.0.2"
  },
  "devDependencies": {
    "tap": "0.0.x",
    "lazy": "1.0.x",
    "websocket-server": "1.4.x",
    "wsclient": "0.2.x",
    "chunky": "0.0.x"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "bouncy\n======\n\nBouncy uses node's http parser innards to bounce http requests around to where\nthey need to go in an entirely transparent way.\n\nUse bouncy as a load balancer or http host router, either programmatically or\nwith the simple command-line tool.\n\nBouncy is websocket and tls (https) capable.\n\n[![build status](https://secure.travis-ci.org/substack/bouncy.png)](http://travis-ci.org/substack/bouncy)\n\n![trampoline](http://substack.net/images/trampoline.png)\n\nexample\n=======\n\nroute.js\n--------\n\nRoute requests based on the host field\n\n````javascript\nvar bouncy = require('bouncy');\n\nbouncy(function (req, bounce) {\n    if (req.headers.host === 'beep.example.com') {\n        bounce(8001);\n    }\n    else if (req.headers.host === 'boop.example.com') {\n        bounce(8002);\n    }\n}).listen(8000);\n````\n\ncommand-line\n============\n\nJust create a `routes.json` file like this:\n\n````javascript\n{\n    \"beep.example.com\" : 8000,\n    \"boop.example.com\" : 8001\n}\n````\n\nThen point the `bouncy` command at this `routes.json` file and give it a port to\nlisten on:\n\n    bouncy routes.json 80\n\nThe `routes.json` file should just map host names to host/port combos.\nUse a colon-separated string to specify a host and port in a route.\n\nUse `\"\"` for the host as a default route.\n\nbouncy(opts={}, cb)\n===================\n\n`bouncy(cb)` returns a new net.Server object that you can `.listen()` on.\n\nIf you specify `opts.key` and `opts.cert`, the connection will be set to secure\nmode using tls. Do this if you want to make an https router.\n\nYour callback `cb` will get these arguments:\n\nreq\n---\n\nThe node http module request object.\n\nTo catch parse errors, listen for the \"error\" event.\n\nbounce(stream, opts={})\n-----------------------\n\nCall this function when you're ready to bounce the request to a stream.\n\nThe exact request that was received will be written to `stream` and future\nincoming data will be piped to and from it.\n\nTo send data to a different url path on the destination stream, you can specify\n`opts.path`.\n\nYou can specify header fields to insert into the request with `opts.headers`.\n\nBy default, `\"x-forwarded-for\"`, `\"x-forwarded-port\"`, and `\"x-forwarded-proto\"`\nare all automatically inserted into the outgoing header.\n\nYou can pass in an EventEmitter on `opts.emitter` to listen for `\"drop\"` events\nwhich occur when a `.write()` fails which happens with annoying frequency in\nnode v0.4.x.\n\nIf you pass in an emitter you'll get the connection object on `\"drop\"` events so\nyou can handle these yourself by writing an error message to the stream. If you\ndon't pass in an `opts.emitter`, the connection will be `.destroy()`ed.\n\n`bounce()` returns the stream object that it's using. This is useful if you pass\nin a port so you can `.on('error', fn)` to detect connection errors.\n\nbounce(port, ...), bounce(host, port, ...), bounce(url)\n-------------------------------------------------------\n\nThese variants of `bounce()` are sugar for\n`bounce(net.createConnection(port))`\nand\n`bounce(net.createConnection(port, host))`.\n\nOptionally you can pass port and host keys to `opts` and it does the same thing.\n\nPassing `bounce()` a string that looks like a url (with or without `\"http://\"`)\nwill set the opts.host, opts.port, and opts.path accordingly.\n\nbounce.respond()\n----------------\n\nReturn a new HTTP response object for the request.\nThis is useful if you need to write an error result.\n\nbounce.upgrade()\n----------------\n\nManually upgrade the connection using\n[parsley](https://github.com/substack/node-parsley).\n\nbounce.reset()\n--------------\n\nDiscard all buffered data. This is sometimes useful for upgraded connections.\n\nattributes\n==========\n\nbounce.parser\n-------------\n\nThe [parsley](https://github.com/substack/node-parsley) parser being used.\n\nbounce.stream\n-------------\n\nThe [buffered stream](https://github.com/mikeal/morestreams) used to buffer the\nheaders and body until bounce() is called.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org), do:\n\n    npm install bouncy\n\nto install as a library or\n\n    npm install -g bouncy\n\nto get the command-line tool.\n\nlicense\n=======\n\nMIT/X11\n\n![jumping](http://substack.net/images/jumping.png)\n\ntests\n=====\n\nWith [npm](http://npmjs.org), do:\n\n    npm test\n",
  "_id": "bouncy@1.3.1",
  "_from": "bouncy@~1.3.1"
}
