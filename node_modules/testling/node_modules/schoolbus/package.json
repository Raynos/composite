{
  "name": "schoolbus",
  "version": "0.0.1",
  "description": "drive browsers around with iframes",
  "main": "index.js",
  "bin": {},
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "dnode-protocol": "~0.1.5",
    "postmessage": "~0.1.3",
    "jquery-browserify": "*",
    "jsonify": "~0.0.0"
  },
  "devDependencies": {
    "domready": "~0.2.11",
    "ecstatic": "~0.1.6",
    "browserify": "~1.12.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/schoolbus.git"
  },
  "homepage": "https://github.com/substack/schoolbus",
  "keywords": [
    "browser",
    "test",
    "driver",
    "iframe",
    "testling"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "schoolbus\n=========\n\nDrive around a browser iframe over multiple page requests using a\n[postMessage](https://developer.mozilla.org/en/DOM/window.postMessage) bus.\n\nexample\n=======\n\nIn the page(s) you want to drive around, insert the\n[browserified](https://github.com/substack/node-browserify)\n`proxy.js` file from this distribution:\n\n```\n$ browserify proxy.js -o proxy_bundle.js\n```\n\n``` html\n<script src=\"/proxy_bundle.js\"></script>\n```\n\nIdeally you could insert this script tag at the top of all text/html responses\nwith a custom proxy but putting the tag in yourself manually works too.\n\nNow you can boss those other pages around, like this:\n\n``` js\nvar schoolbus = require('schoolbus');\nvar domready = require('domready');\n\ndomready(function () {\n    var uri = 'http://localhost:7272/test-form/';\n    var bus = schoolbus(uri, function (win, $) {\n        console.log('href[0]=' + win.location.href);\n        \n        var form = $('#form')[0];\n        $('input[name=login]').val('testling');\n        $('input[name=passw]').val('qwerty');\n        $('form').submit();\n    });\n    \n    bus.next(function (win, $) {\n        console.log('href[1]=' + win.location.href);\n        console.log($('#welcome p:first').text());\n    });\n    \n    bus.appendTo(document.body);\n});\n```\n\nwhich when run against our particular pages will log the following output:\n\n```\nhref[0]=http://localhost:7272/test-form/\nhref[1]=http://localhost:7272/test-form/login\nLogin successful.\n```\n\nNote that the code seems to have spanned multiple browser requests without\nresorting to a fancy webdriver-style plugin architecture and the API is entirely\njavascript-driven.\n\nmethods\n=======\n\n``` js\nvar schoolbus = require('schoolbus')\n```\n\nvar bus = schoolbus(uri, vars={}, cb)\n-------------------------------------\n\nReturn a new bus starting at `uri`.\n\nOptionally, you can specify some variables `vars` which will be sent over the\npostMessage bus using\n[dnode-protocol](http://github.com/substack/dnode-protocol)\nso you can send circular objects and callbacks.\nJust don't try to send dom nodes.\n\nIf you specify a callback `cb`, then `bus.next(cb)` will register a listener\nwhen the page contents become available.\n\nbus.next(cb)\n------------\n\nRegister a callback `cb` for the next available page transition.\n\nEach transition fires a registered callback FIFO, so you can build up a queue of\ncallbacks to script what happens when multiple pages are visited.\n\nThe `cb` will be stringified with `.toString()` and evaluated in the new page\ncontext, but with the variables bound when `schoolbus()` was called. \n\nbus.navigate(uri)\n-----------------\n\nDrive the bus to `uri`.\n\nevents\n======\n\nbus.on('open', loc)\n-------------------\n\nFired when a remote page loads in the iframe that has the proxy.js script.\n`loc` is a copy of the page's `window.location` object.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install schoolbus\n```\n\nthen build `proxy.js` with browserify and drop it into the pages you want to\ndrive around.\n\nlicense\n=======\n\nMIT\n",
  "_id": "schoolbus@0.0.1",
  "_from": "schoolbus@~0.0.1"
}
